/**
 * Copyright (C) 2025 TechnicallyWeb3
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Affero General Public License for more details.
 */

// SPDX-License-Identifier: AGPL-3.0
pragma solidity ^0.8.20;

import "@wttp/core/contracts/interfaces/IBaseWTTPSite.sol";

/// @title WTTP Gateway Contract
/// @notice Provides a unified interface for accessing WTTP sites with extended functionality
/// @dev Acts as an intermediary layer between clients and WTTP sites, adding range handling capabilities
///      and standardizing response formats across different site implementations
contract WTTPGateway {
    
    /// @notice Forwards OPTIONS requests to a specified site
    /// @dev Simply passes the request through without modification
    /// @param _site Address of the target WTTP site contract
    /// @param _path The path to the resource
    /// @return _optionsResponse The response from the site
    function OPTIONS(
        address _site, 
        string memory _path
    ) public view returns (OPTIONSResponse memory _optionsResponse) {
        return IBaseWTTPSite(_site).OPTIONS(_path);
    }

        /// @notice Forwards HEAD requests to a specified site
    /// @dev Simply passes the request through without modification
    /// @param _site Address of the target WTTP site contract
    /// @param _headRequest The HEAD request parameters
    /// @return _headResponse The response from the site
    function HEAD(
        address _site, 
        HEADRequest memory _headRequest
    ) public view returns (HEADResponse memory _headResponse) {
        return IBaseWTTPSite(_site).HEAD(_headRequest);
    }

    /// @notice Modifier to check if the site allows LOCATE requests, preflight check
    modifier locateAllowed(address _site, string memory _path) {
        uint16 methods = IBaseWTTPSite(_site).OPTIONS(_path).allowed;
        if(methods & uint16(Method.LOCATE) == 0) {
            revert _405("Method Not Allowed", methods, false);
        }
        _;
    }

    function _processDataPointSize(
        IDataPointStorage _dps,
        bytes32[] memory _dataPoints
    ) internal view returns (DataPointSizes memory _sizes) {
        uint256 dataPointLength = _dataPoints.length;
        if (dataPointLength == 0) {
            return DataPointSizes(new uint256[](0), 0);
        }

        uint256[] memory dataPointSizes = new uint256[](dataPointLength);
        uint256 totalSize;
        for (uint256 i; i < dataPointLength; i++) {
            dataPointSizes[i] = _dps.dataPointSize(_dataPoints[i]);
            totalSize += dataPointSizes[i];
        }
        _sizes = DataPointSizes(dataPointSizes, totalSize);
    }



    function _processData(
        IDataPointStorage _dps, 
        bytes32[] memory _dataPoints,
        Range memory _range // range of bytes to extract from the dataPoints, unlike the request range, which spans the resource
    ) internal view returns (ProcessedData memory _processedData) {

        DataPointSizes memory sizes = _processDataPointSize(_dps, _dataPoints);
        _range = normalizeRange_(_range, sizes.totalSize);
        // -1 for length to index conversion 
        uint256 dataPointLength = _dataPoints.length;
        uint256 dataLength = uint256(int256(1) + _range.end - _range.start);
        if (dataPointLength == 0 || dataLength == 0) {
            // empty datapoints or 0 length range
            return ProcessedData(new bytes(0), sizes);
        }
        bytes memory data = new bytes(dataLength);
        uint256 startOffset = _range.start;
        uint256 bytesWritten;

        for (uint256 i; i < dataPointLength && bytesWritten < dataLength; i++) {
            uint256 dataPointSize = sizes.sizes[i];
            if (startOffset > dataPointSize) {
                // havent found starting dataPoint yet
                startOffset -= dataPointSize;
            } else if (startOffset == 0 && bytesWritten + dataPointSize <= dataLength) {
                // write the whole dataPoint
                bytes memory dp = _dps.readDataPoint(_dataPoints[i]);
                assembly {
                    // memcpy via identity pre-compile (address 0x04)
                    let len := mload(dp)                       // == dataPointSize
                    let src := add(dp, 32)                     // skip length slot
                    let dst := add(add(data, 32), bytesWritten)
                    pop(staticcall(gas(), 4, src, len, dst, len))
                }
                bytesWritten += dataPointSize;
            } else if (startOffset == 0) {
                // write the partial dataPoint at the end of the data
                bytes memory dataPointData = _dps.readDataPoint(_dataPoints[i]);
                assembly {
                    // Calculate how many bytes we need to copy
                    let bytesToCopy := sub(dataLength, bytesWritten)
                    // Copy the bytes from dataPointData to data
                    let src := add(add(dataPointData, 32), 0) // Skip length prefix
                    let dst := add(add(data, 32), bytesWritten) // Skip length prefix
                    // Copy the bytes
                    pop(staticcall(gas(), 4, src, bytesToCopy, dst, bytesToCopy))
                }
                bytesWritten += dataLength - bytesWritten;
                break;
            }
            
            if (startOffset > 0 && startOffset < dataPointSize) {
                // we just found the starting dataPoint this iteration
                // it's not a full datapoint since startOffset is not 0
                // write the partial dataPoint at the start of the data
                bytes memory dataPointData = _dps.readDataPoint(_dataPoints[i]);
                assembly {
                    // Calculate how many bytes we need to copy
                    let bytesToCopy := sub(dataPointSize, startOffset)
                    // Copy the bytes from dataPointData to data
                    let src := add(add(dataPointData, 32), startOffset) // Skip length prefix
                    let dst := add(add(data, 32), bytesWritten) // Skip length prefix
                    // Copy the bytes
                    pop(staticcall(gas(), 4, src, bytesToCopy, dst, bytesToCopy))
                }
                bytesWritten += dataPointSize - startOffset;
                startOffset = 0;
            }
        }

        _processedData = ProcessedData(data, sizes);

    }

    function LOCATE(
        address _site, 
        LOCATERequest memory _locateRequest
    ) public view locateAllowed(_site, _locateRequest.head.path) 
    returns (LOCATEResponseSecure memory _locateResponse) {
        // the site doesn't have a native LOCATE method, but a site GET returns a 
        // ranged LOCATE response, we can transform it into a Secure LOCATE response
        LOCATEResponse memory locateResponse = IBaseWTTPSite(_site).GET(_locateRequest);
        bytes32[] memory dataPoints = locateResponse.resource.dataPoints;
        IDataPointStorage DPS = IDataPointStorage(IBaseWTTPSite(_site).DPS());
        _locateResponse = LOCATEResponseSecure(
            locateResponse, 
            _processDataPointSize(DPS, dataPoints)
        );
    }

    /// @notice Handles GET requests with byte range support
    /// @dev First locates the resource, then processes any byte range request
    /// @param _site Address of the target WTTP site contract
    /// @param _getRequest The GET request parameters including any byte range
    /// @return _getResponse Response with either full data or the requested byte range
    function GET(
        address _site, 
        GETRequest memory _getRequest
    ) public view returns (GETResponse memory _getResponse) {

        IBaseWTTPSite site = IBaseWTTPSite(_site);
        LOCATERequest memory locateRequest = _getRequest.locate;
        LOCATEResponse memory locateResponse = site.GET(locateRequest);

        uint256 resourceChunkLength = locateResponse.resource.totalChunks;
        uint256 resourceByteLength = locateResponse.head.metadata.size;

        IDataPointStorage DPS = IDataPointStorage(site.DPS());
        bytes32[] memory dataPoints = locateResponse.resource.dataPoints;
        DataPointSizes memory dataPointSizes = _processDataPointSize(DPS, dataPoints);

        uint256 dataPointsChunkLength = dataPoints.length;
        uint256 dataPointsByteLength = dataPointSizes.totalSize;
        
        Range memory paddingChunks = normalizeRange_(locateRequest.rangeChunks, resourceChunkLength);        

        paddingChunks.end = 
            int256(resourceChunkLength) - 1 
            - paddingChunks.start 
            - dataPointsChunkLength;


        // normalize individual digit since GET passed, rangeChunks is valid
        if (paddingChunks.start < 0) {
            paddingChunks.start = int256(resourceChunkLength) + paddingChunks.start;
        }


        // early return if the start is 0, rangeBytes starts 
        if (paddingChunks.start == 0) {
            // No need to calculate the padding, we can just use the dataPoints
            return GETResponse(
                locateResponse,
                _processData(
                    DPS,
                    dataPoints,
                    _getRequest.rangeBytes
                )
            );
        }

        uint256 dataPointLength = dataPoints.length;
        paddingChunks.end = int256(resourceChunkLength) - 1 - paddingChunks.start - dataPointLength;
        Range memory index;

        // if the end is closer than the start, we need to check the size from the end
        if (paddingChunks.end < paddingChunks.start) {
            index.start = paddingChunks.end + 1;
            index.end = dataPointLength;
        } else {
            index.start = 0;
            index.end = paddingChunks.start;
        }

        uint256 bytesBeforeDatapoints;
        for (uint256 i = index.start; i < index.end; i++) {
            bytesBeforeDatapoints += DPS.readDataPoint(dataPoints[i]);
        }

        uint256 dataPointByteLength;

        if (index.start != 0) {
            // the calculated range is from the end of the resourceChunks
            bytesBeforeDatapoints = resourceByteLength - dataPointByteLength - bytesBeforeDatapoints;
        }

        Range memory paddingBytes = normalizeRange_(_getRequest.rangeBytes, dataPointByteLength);

        return GETResponse(
            locateResponse,
            _processData(
                DPS,
                dataPoints,
                paddingBytes
            )
        );

        // Request/Response:
        // [ChunkPadding.start][DataPoints][ChunkPadding.end]
        //   ^ We need to calculate byteLength so we can get the byteRange of the dataPoints
        // DataPoints:
        // [BytePadding.start][DataPoint1][DataPoint2][DataPoint3][BytePadding.end]
        //   ^ = Request.ByteRange.start - Request.ChunkPadding.start.dataLength
        
        // I wish there was a way to easily figure out if the start or end of the 
        // DataPoints is closer to the start or end of the resourceChunks



        // padding.end = int256(resourceChunkLength) - 1 - padding.start - dataPointLength;

        // // if the end is closer than the start, we need to check the size from the end
        // if (padding.end < padding.start) {
        //     padding.start = padding.end + 1;
        //     padding.end = dataPointLength;
        // }

        // // if the start is closer than the end, we need to check the size from the start
        // if (padding.start > padding.end) {
        //     padding.end = padding.start;
        //     padding.start = 0;
        // }

        // uint256 bytesBeforeDatapoints;
        // for (uint256 i = padding.start; i < padding.end; i++) {
        //     bytesBeforeDatapoints += DPS.readDataPoint(dataPoints[i]);
        // }

        // if (padding.start != 0) {
        //     // we need to calculate padding.start
        //     padding.start = dataLength - dataPointLength - bytesBeforeDatapoints;
        // }




        // uint256 endChunk = startChunk + dataPoints.length;

        // if (startChunk > endChunk) {
        // uint256 endChunk = locateRequest.rangeChunks.end;
        // uint256 totalChunks = locateResponse.resource.totalChunks;
        // if (startChunk > endChunk || endChunk > totalChunks) {
        //     revert _416("Chunk Range Not In Chunk Range", locateRequest.rangeChunks, totalChunks);
        // }
        // uint256 startByte = locateRequest.rangeBytes.start;
        // uint256 resourceSize = locateResponse.head.metadata.size;
        // Range memory requestByteRange = normalizeRange_(_getRequest.rangeBytes, resourceSize);







        // if (requestByteRange.end - requestByteRange.start > ) {
        // uint256 memory endPadding = 
        //     locateResponse.resource.totalChunks 
        //     - requestByteRange.start
        //     - ;
        // if (requestRange.start > requestRange.end + 1) {
        //     revert _416("Byte Range Not In Chunk Range", requestRange, resourceSize);
        // }





        // bytes32[] memory dataPoints = locateResponse.resource.dataPoints;
        // IDataPointStorage DPS = IDataPointStorage(site.DPS());

        // _getResponse = GETResponse(


        // // example: 
        // // request: chunk range: 2-4, byte range: 200-800

        // // Get the full response from the site
        // LOCATEResponse memory locateResponse = IBaseWTTPSite(_site).GET(_getRequest.locate);
        // bytes32[] memory dataPoints = locateResponse.locate.resource.dataPoints;
        // IDataPointStorage DPS = IDataPointStorage(IBaseWTTPSite(_site).DPS());

        // for (uint256 i; i < dataPoints.length; i++) {
        //     bytes memory dataPoint = DPS.readDataPoint(dataPoints[i]);
        //     _getResponse.data.push(dataPoint);
        // }



        

        // // totalSize: 1000 bytes, padding: 180-190, responseSize: 620 bytes, dataPoints: 3 (2, 3, 4)

        // // get the padding (start/end size before/after the response dataPoint array)
        // Range memory responsePadding = locateResponse.padding;
        // // get the response size (the byte size of the response dataPoint array)
        // uint256 responseSize = locateResponse.locate.head.metadata.size;
        // // get the total size of the response (the byte size of the resource)
        // uint256 totalSize = responseSize + responsePadding.start + responsePadding.end;
        // // normalize the request range to positive integers (actual byte indicies)
        // Range memory requestRange = normalizeRange_(_getRequest.rangeBytes, totalSize);
        // // check if the requested byte range exists within the requested chunk array
        // if (
        //     responsePadding.start > requestRange.start || 
        //     responsePadding.end > totalSize - requestRange.end
        // ) {
        //     revert _416("Byte Range Not In Chunk Range", requestRange, totalSize);
        // }

        // // get the response dataPoints
        // bytes32[] memory dataPoints = locateResponse.locate.resource.dataPoints;
        // // get the count of the response dataPoints
        // uint256 dataPointsLength = dataPoints.length;
        // // get the start byte index of the requested datapoint range
        // uint256 startByte = requestRange.start - responsePadding.start;
        // // startByte: 20

        // // build the response data
        // IDataPointStorage DPS = IDataPointStorage(IBaseWTTPSite(_site).DPS());
        // uint256[] memory dataPointSizes = locateResponse.sizes;
        // bytes memory data = new bytes(requestRange.end - requestRange.start);
        // for (uint256 i; i < dataPointsLength; i++) {
        //     uint256 dataPointSize = dataPointSizes[i];

        //     if (startByte > dataPointSize) {
        //         startByte -= dataPointSize;
        //     } else if (startByte == 0) { // if the startByte is 0, we're past the start of the requested range
        //         data.push(DPS.readDataPoint(dataPoints[i]));
        //     } else {
        //         // first dataPoint is the start of the requested range
        //         for (uint256 j; j < dataPointSize; j++) {
        //         startByte = 0;
        //     startByte -= dataPointSize;
        // }
        // // datapoint[startDataPoint][startByte] is the start of the requested range
        // // startDataPoint: 0, startByte: 20


        // // get the end byte index of the requested datapoint range
        // uint256 endByte = requestRange.end - responsePadding.end;
        // // endByte: 10 (10 bytes from the end of the response data)
        // uint256 endDataPoint;
        // for (endDataPoint; endDataPoint < dataPointsLength; endDataPoint++) {
        //     byteOffset += locateResponse.sizes[endDataPoint];
        //     if (byteOffset > endByte) {
        //         break;
        //     }
        // }
    }

    /// @notice Handles LOCATE requests with data point range support
    /// @dev First locates all data points, then processes any range request
    /// @param _site Address of the target WTTP site contract
    /// @param _locateRequest The LOCATE request parameters including any chunk range
    /// @return _locateResponse Response with either all data points or the requested range
    function LOCATE(
        address _site, 
        LOCATERequest memory _locateRequest
    ) public view returns (LOCATEResponse memory _locateResponse) {
        // First get the full response from the site
        _locateResponse = IWTTPSite(_site).LOCATE(_locateRequest.head);

        // Convert range to absolute indices and check bounds
        (uint256 _start, uint256 _end, bool _outOfBounds) = resolveDataPointRange(
            _locateRequest.rangeChunks, 
            _locateResponse.dataPoints.length
        );

        if (_outOfBounds) {
            _locateResponse.head.responseLine.code = 416; // Range Not Satisfiable
            return _locateResponse;
        }

        if (!isFullRange(Range(int256(_start), int256(_end)), _locateResponse.dataPoints.length)) {
            
            // Process the range
            RangedResponse memory rangeResp = _processRange(
                _site,
                _locateResponse.dataPoints,
                _start,
                _end,
                RangeType.DATA_POINTS
            );
            
            _locateResponse.dataPoints = rangeResp.dataPoints;
            _locateResponse.head.responseLine.code = 206; // Partial Content
        } else {
            _locateResponse.head.responseLine.code = 200; // OK
        }
        
        return _locateResponse;
    }
    
    /// @notice Defines types of ranges that can be processed
    /// @dev Used to determine how to handle range processing logic
    enum RangeType {
        BYTES,        // Range in bytes (for content)
        DATA_POINTS   // Range in data points (for chunks)
    }

    /// @notice Structure for ranged response data
    /// @dev Used to return range processing results with appropriate metadata
    struct RangedResponse {
        bytes32[] dataPoints;   // Array of data point addresses
        bytes data;             // Assembled byte data for byte ranges
        RangeType rangeType;    // Type of range processed
        bool isPartialRange;    // Whether this is a partial or full range
    }
    
    // /// @notice Resolves a data point range to absolute indices
    // /// @dev Handles negative indices (counting from end) and range validation
    // /// @param range The range to resolve
    // /// @param totalLength The total length of the data points
    // /// @return startIdx The resolved start index
    // /// @return endIdx The resolved end index
    // /// @return outOfBounds True if the range is out of bounds
    // function resolveDataPointRange(
    //     Range memory range,
    //     uint256 totalLength
    // ) internal pure returns (uint256 startIdx, uint256 endIdx, bool outOfBounds) {
    //     // Handle start index
    //     if (range.start < 0) {
    //         // Negative index counts from the end
    //         if (uint256(-range.start) > totalLength) {
    //             return (0, 0, true); // Out of bounds
    //         }
    //         startIdx = totalLength - uint256(-range.start);
    //     } else {
    //         startIdx = uint256(range.start);
    //     }
        
    //     // Handle end index
    //     if (range.end <= 0) {
    //         // Zero or negative index
    //         if (range.end == 0) {
    //             endIdx = totalLength; // End means "up to the end"
    //         } else if (uint256(-range.end) > totalLength) {
    //             return (0, 0, true); // Out of bounds
    //         } else {
    //             endIdx = totalLength - uint256(-range.end);
    //         }
    //     } else {
    //         endIdx = uint256(range.end);
    //     }
        
    //     // Check final bounds
    //     if (startIdx > endIdx || endIdx > totalLength) {
    //         return (0, 0, true); // Out of bounds
    //     }
        
    //     return (startIdx, endIdx, false);
    // }
    
    // /// @notice Resolves a byte range to absolute indices
    // /// @dev Calculates total size across data points and handles range validation
    // /// @param _site The site address
    // /// @param dataPoints The data points
    // /// @param range The range to resolve
    // /// @return startIdx The resolved start byte index
    // /// @return endIdx The resolved end byte index
    // /// @return outOfBounds True if the range is out of bounds
    // function resolveByteRange(
    //     address _site,
    //     bytes32[] memory dataPoints,
    //     Range memory range
    // ) internal view returns (uint256 startIdx, uint256 endIdx, bool outOfBounds) {
    //     // Calculate total size
    //     uint256 totalSize = 0;
    //     for (uint256 i = 0; i < dataPoints.length; i++) {
    //         totalSize += IDataPointStorage(IWTTPSite(_site).DPS()).dataPointSize(dataPoints[i]);
    //     }
        
    //     // Handle start index
    //     if (range.start < 0) {
    //         // Negative index counts from the end
    //         if (uint256(-range.start) > totalSize) {
    //             return (0, 0, true); // Out of bounds
    //         }
    //         startIdx = totalSize - uint256(-range.start);
    //     } else {
    //         startIdx = uint256(range.start);
    //     }
        
    //     // Handle end index
    //     if (range.end <= 0) {
    //         // Zero or negative index
    //         if (range.end == 0) {
    //             endIdx = totalSize; // End means "up to the end"
    //         } else if (uint256(-range.end) > totalSize) {
    //             return (0, 0, true); // Out of bounds
    //         } else {
    //             endIdx = totalSize - uint256(-range.end);
    //         }
    //     } else {
    //         endIdx = uint256(range.end);
    //     }
        
    //     // Check final bounds
    //     if (startIdx > endIdx || endIdx > totalSize) {
    //         return (0, 0, true); // Out of bounds
    //     }
        
    //     return (startIdx, endIdx, false);
    // }
    
    // /// @notice Processes chunk range requests using resolved indices
    // /// @dev Handles both data point ranges and byte ranges with different logic
    // /// @param _site The site address
    // /// @param dataPoints The data points to process
    // /// @param startIdx The resolved start index
    // /// @param endIdx The resolved end index
    // /// @param rangeType The type of range
    // /// @return rangeResponse The modified response with selected chunks or bytes
    // function _processRange(
    //     address _site,
    //     bytes32[] memory dataPoints,
    //     uint256 startIdx,
    //     uint256 endIdx,
    //     RangeType rangeType
    // ) internal view returns (RangedResponse memory rangeResponse) {
    //     // Initialize response
    //     rangeResponse.rangeType = rangeType;
        
    //     // Check if range is full range (handled by caller, but double-check)
    //     if (startIdx == 0 && endIdx == dataPoints.length) {
    //         // Return full data
    //         rangeResponse.dataPoints = dataPoints;
    //         rangeResponse.isPartialRange = false;
    //         return rangeResponse;
    //     } else {
    //         rangeResponse.isPartialRange = true;
    //     }

    //     if (rangeType == RangeType.DATA_POINTS) {
    //         // Create array with only the requested chunks
    //         bytes32[] memory _dataPoints = new bytes32[](endIdx - startIdx);
    //         for (uint256 i = startIdx; i < endIdx; i++) {
    //             _dataPoints[i - startIdx] = dataPoints[i];
    //         }
    //         rangeResponse.dataPoints = _dataPoints;
    //     } else if (rangeType == RangeType.BYTES) {
    //         // Handle byte range
    //         if (startIdx == 0 && endIdx == 0) {
    //             // Empty range
    //             rangeResponse.data = new bytes(0);
    //             return rangeResponse;
    //         }
            
    //         // Find starting dataPoint and offset
    //         uint256 startDP = 0;
    //         uint256 byteOffset = 0;
    //         uint256 runningSize = 0;
    //         IDataPointStorage dps = IDataPointStorage(IWTTPSite(_site).DPS());
            
    //         // Locate the data point containing the start byte
    //         for (uint256 i = 0; i < dataPoints.length; i++) {
    //             uint256 dpSize = dps.dataPointSize(dataPoints[i]);

    //             if (runningSize + dpSize > startIdx) {
    //                 startDP = i;
    //                 byteOffset = startIdx - runningSize;
    //                 break;
    //             }
    //             runningSize += dpSize;
    //         }
            
    //         // Calculate result size and allocate memory
    //         uint256 resultSize = endIdx - startIdx;
    //         bytes memory resultData = new bytes(resultSize);
    //         uint256 resultPos = 0;
            
    //         // Copy data from each required data point
    //         for (uint256 i = startDP; i < dataPoints.length && resultPos < resultSize; i++) {
    //             bytes memory dpData = dps.readDataPoint(dataPoints[i]);
    //             uint256 startPos = (i == startDP) ? byteOffset : 0;
                
    //             for (uint256 j = startPos; j < dpData.length && resultPos < resultSize; j++) {
    //                 resultData[resultPos++] = dpData[j];
    //             }
    //         }
            
    //         rangeResponse.data = resultData;
    //     }
        
    //     return rangeResponse;
    // }
}
